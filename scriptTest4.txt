//5. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//6. Спарсить response body в json.
let respData = pm.response.json();
//7. Спарсить request.
let REQ = request.data;
//8. Проверить, что json response имеет параметр start_qa_salary
pm.test("resp have param start salary",function () {
    pm.expect(respData).haveOwnProperty("start_qa_salary")
});
//9. Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("resp have param 6 month salary",function () {
    pm.expect(respData).haveOwnProperty("qa_salary_after_6_months")
});
//10. Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("resp have param 12 month salary",function () {
    pm.expect(respData).haveOwnProperty("qa_salary_after_12_months")
});
//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("resp have param 1.5 year salary",function () {
    pm.expect(respData).haveOwnProperty("qa_salary_after_1.5_year")
});
//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test("resp have param 3.5 year salary",function () {
    pm.expect(respData).haveOwnProperty("qa_salary_after_3.5_years")
});
//13. Проверить, что json response имеет параметр person
pm.test("resp have param persone",function () {
    pm.expect(respData).haveOwnProperty("person")
});
//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
pm.test("start salary same req and resp", function () {
    pm.expect(respData.start_qa_salary).to.eql(+REQ.salary)
});
//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test("6 month salary same req and resp", function () {
    pm.expect(respData.qa_salary_after_6_months).to.eql(+REQ.salary*2)
});
//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.test("12 month salary same req and resp", function () {
    pm.expect(respData.qa_salary_after_12_months).to.eql(+REQ.salary*2.7)
});
//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
pm.test("1.5 year salary same req and resp", function () {
    pm.expect(respData["qa_salary_after_1.5_year"]).to.eql(+REQ.salary*3.3)
});
//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
pm.test("3.5 year salary same req and resp", function () {
    pm.expect(respData["qa_salary_after_3.5_years"]).to.eql(+REQ.salary*3.8)
});
//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
pm.test("3.5 year salary same req and resp", function () {
    pm.expect(respData.person.u_name[1]).to.eql(+REQ.salary)
    });
//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
pm.test("age same req and resp", function () {
    pm.expect(respData.person.u_age).to.eql(+REQ.age)
});
//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
pm.test("salary after 5years same req and resp", function () {
    pm.expect(respData.person.u_salary_5_years).to.eql(+REQ.salary*4.2)
});
//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
for(let i in respData.person)
    { 
    console.log(i)
    console.log(respData.person[i])
    }
